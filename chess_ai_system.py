#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ —à–∞—Ö–º–∞—Ç —Å –ò–ò –¥–ª—è –±–æ—Ç–∞ –Ø–∫–æ–≤–∞ –î–∞–≤–∏–¥–æ–≤–∏—á–∞
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
"""

import json
import random
import logging
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import asyncio
import aiohttp

logger = logging.getLogger(__name__)

class Difficulty(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò"""
    BEGINNER = ("–ù–æ–≤–∏—á–æ–∫", 1, "–î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç—Å—è")
    EASY = ("–õ–µ–≥–∫–∏–π", 3, "–ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏")
    MEDIUM = ("–°—Ä–µ–¥–Ω–∏–π", 5, "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
    HARD = ("–°–ª–æ–∂–Ω—ã–π", 7, "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ")
    EXPERT = ("–≠–∫—Å–ø–µ—Ä—Ç", 9, "–ö–∞–∫ –Ø–∫–æ–≤ –≤ –º–æ–ª–æ–¥–æ—Å—Ç–∏!")

class Color(Enum):
    """–¶–≤–µ—Ç–∞ —Ñ–∏–≥—É—Ä"""
    WHITE = ("white", "–ë–µ–ª—ã–µ", "‚ôî‚ôï‚ôñ‚ôó‚ôò‚ôô")
    BLACK = ("black", "–ß–µ—Ä–Ω—ã–µ", "‚ôö‚ôõ‚ôú‚ôù‚ôû‚ôü")

class GameState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
    SETUP = "setup"
    PLAYING = "playing"
    PAUSED = "paused"
    FINISHED = "finished"

@dataclass
class ChessGame:
    """–û–±—ä–µ–∫—Ç —à–∞—Ö–º–∞—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    user_id: int
    player_color: Color
    difficulty: Difficulty
    state: GameState
    board: List[List[str]]
    moves_history: List[Dict]
    current_turn: Color
    game_id: str
    ai_thinking: bool = False
    last_move: Optional[Dict] = None
    captured_pieces: Dict[str, List[str]] = None
    
    def __post_init__(self):
        if self.captured_pieces is None:
            self.captured_pieces = {"white": [], "black": []}

class ChessAISystem:
    """–°–∏—Å—Ç–µ–º–∞ —à–∞—Ö–º–∞—Ç —Å –ò–ò"""
    
    def __init__(self):
        self.active_games: Dict[int, ChessGame] = {}
        self.chess_api_url = "https://chess-api.com/v1"  # Placeholder API
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
        self.initial_board = [
            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
            ['', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', ''],
            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
        ]
        
        # Unicode —Ñ–∏–≥—É—Ä—ã
        self.pieces_unicode = {
            'K': '‚ôî', 'Q': '‚ôï', 'R': '‚ôñ', 'B': '‚ôó', 'N': '‚ôò', 'P': '‚ôô',
            'k': '‚ôö', 'q': '‚ôõ', 'r': '‚ôú', 'b': '‚ôù', 'n': '‚ôû', 'p': '‚ôü'
        }
    
    def start_game_setup(self, user_id: int) -> Dict[str, Any]:
        """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        return {
            "type": "setup",
            "message": "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏",
            "setup_step": "difficulty",
            "data": {
                "difficulties": [
                    {
                        "id": diff.name.lower(),
                        "name": diff.value[0],
                        "level": diff.value[1],
                        "description": diff.value[2]
                    }
                    for diff in Difficulty
                ]
            }
        }
    
    def set_difficulty(self, user_id: int, difficulty_id: str) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã"""
        try:
            difficulty = Difficulty[difficulty_id.upper()]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if not hasattr(self, '_temp_setups'):
                self._temp_setups = {}
            
            self._temp_setups[user_id] = {"difficulty": difficulty}
            
            return {
                "type": "setup",
                "message": f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty.value[0]}",
                "setup_step": "color",
                "data": {
                    "colors": [
                        {
                            "id": "white",
                            "name": "–ë–µ–ª—ã–µ",
                            "description": "–ü–µ—Ä–≤—ã–π —Ö–æ–¥ - –≤–∞—à!",
                            "pieces": "‚ôî‚ôï‚ôñ‚ôó‚ôò‚ôô"
                        },
                        {
                            "id": "black", 
                            "name": "–ß–µ—Ä–Ω—ã–µ",
                            "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä",
                            "pieces": "‚ôö‚ôõ‚ôú‚ôù‚ôû‚ôü"
                        }
                    ]
                }
            }
        except KeyError:
            return {"type": "error", "message": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å!"}
    
    def set_color_and_start(self, user_id: int, color_id: str) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É"""
        try:
            color = Color.WHITE if color_id == "white" else Color.BLACK
            
            if not hasattr(self, '_temp_setups') or user_id not in self._temp_setups:
                return {"type": "error", "message": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å!"}
            
            difficulty = self._temp_setups[user_id]["difficulty"]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            game_id = f"game_{user_id}_{random.randint(1000, 9999)}"
            
            game = ChessGame(
                user_id=user_id,
                player_color=color,
                difficulty=difficulty,
                state=GameState.PLAYING,
                board=[row[:] for row in self.initial_board],  # –ö–æ–ø–∏—è –¥–æ—Å–∫–∏
                moves_history=[],
                current_turn=Color.WHITE,  # –ë–µ–ª—ã–µ –≤—Å–µ–≥–¥–∞ —Ö–æ–¥—è—Ç –ø–µ—Ä–≤—ã–º–∏
                game_id=game_id
            )
            
            self.active_games[user_id] = game
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            del self._temp_setups[user_id]
            
            return {
                "type": "game_start",
                "message": f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
                          f"üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty.value[0]}\n"
                          f"üé® –í—ã –∏–≥—Ä–∞–µ—Ç–µ: {color.value[1]}\n"
                          f"‚≠ê {'–í–∞—à —Ö–æ–¥!' if color == Color.WHITE else '–•–æ–¥–∏—Ç –ò–ò...'}",
                "game": self._game_to_dict(game),
                "board_data": self._get_board_data(game)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
            return {"type": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã"}
    
    def make_move(self, user_id: int, move_data: Dict) -> Dict[str, Any]:
        """–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞"""
        if user_id not in self.active_games:
            return {"type": "error", "message": "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        game = self.active_games[user_id]
        
        if game.state != GameState.PLAYING:
            return {"type": "error", "message": "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"}
        
        if game.current_turn != game.player_color:
            return {"type": "error", "message": "–ù–µ –≤–∞—à —Ö–æ–¥!"}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
        move_result = self._validate_and_make_move(game, move_data)
        
        if not move_result["valid"]:
            return {
                "type": "invalid_move",
                "message": f"‚ùå {move_result['reason']}",
                "board_data": self._get_board_data(game)
            }
        
        # –•–æ–¥ —É—Å–ø–µ—à–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ò–ò
        game.current_turn = Color.BLACK if game.player_color == Color.WHITE else Color.WHITE
        game.moves_history.append(move_result["move"])
        
        response = {
            "type": "move_success",
            "message": "‚úÖ –•–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ò–ò –¥—É–º–∞–µ—Ç...",
            "game": self._game_to_dict(game),
            "board_data": self._get_board_data(game),
            "last_move": move_result["move"]
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç/–ø–∞—Ç
        game_status = self._check_game_status(game)
        if game_status["finished"]:
            game.state = GameState.FINISHED
            response["game_finished"] = game_status
            return response
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –ò–ò –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        game.ai_thinking = True
        
        return response
    
    async def make_ai_move(self, user_id: int) -> Dict[str, Any]:
        """–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –ò–ò"""
        if user_id not in self.active_games:
            return {"type": "error", "message": "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        game = self.active_games[user_id]
        game.ai_thinking = False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–æ–¥ –ò–ò
        ai_move = await self._generate_ai_move(game)
        
        if not ai_move:
            return {"type": "error", "message": "–ò–ò –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥"}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ –ò–ò
        self._execute_move(game, ai_move)
        game.current_turn = game.player_color
        game.moves_history.append(ai_move)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        game_status = self._check_game_status(game)
        
        response = {
            "type": "ai_move",
            "message": f"ü§ñ –ò–ò —Å–¥–µ–ª–∞–ª —Ö–æ–¥: {self._move_to_notation(ai_move)}",
            "game": self._game_to_dict(game),
            "board_data": self._get_board_data(game),
            "ai_move": ai_move,
            "yakov_comment": self._get_yakov_chess_comment(ai_move, game)
        }
        
        if game_status["finished"]:
            game.state = GameState.FINISHED
            response["game_finished"] = game_status
        
        return response
    
    def get_possible_moves(self, user_id: int, from_pos: Dict) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —Ñ–∏–≥—É—Ä—ã"""
        if user_id not in self.active_games:
            return {"type": "error", "message": "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        game = self.active_games[user_id]
        row, col = from_pos["row"], from_pos["col"]
        
        if not (0 <= row < 8 and 0 <= col < 8):
            return {"possible_moves": []}
        
        piece = game.board[row][col]
        if not piece:
            return {"possible_moves": []}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∏–≥—É—Ä–∞ –∏–≥—Ä–æ–∫–∞
        piece_color = Color.WHITE if piece.isupper() else Color.BLACK
        if piece_color != game.player_color:
            return {"possible_moves": []}
        
        moves = self._calculate_possible_moves(game, row, col, piece)
        
        return {
            "type": "possible_moves",
            "possible_moves": moves,
            "piece": piece,
            "from": {"row": row, "col": col}
        }
    
    def _validate_and_make_move(self, game: ChessGame, move_data: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞"""
        from_pos = move_data["from"]
        to_pos = move_data["to"]
        
        from_row, from_col = from_pos["row"], from_pos["col"]
        to_row, to_col = to_pos["row"], to_pos["col"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if not (0 <= from_row < 8 and 0 <= from_col < 8 and 0 <= to_row < 8 and 0 <= to_col < 8):
            return {"valid": False, "reason": "–•–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å–∫–∏"}
        
        piece = game.board[from_row][from_col]
        if not piece:
            return {"valid": False, "reason": "–ù–µ—Ç —Ñ–∏–≥—É—Ä—ã –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç —Ñ–∏–≥—É—Ä—ã
        piece_color = Color.WHITE if piece.isupper() else Color.BLACK
        if piece_color != game.player_color:
            return {"valid": False, "reason": "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Ñ–∏–≥—É—Ä–∞"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö–æ–¥–∞
        possible_moves = self._calculate_possible_moves(game, from_row, from_col, piece)
        target_move = next((m for m in possible_moves if m["row"] == to_row and m["col"] == to_col), None)
        
        if not target_move:
            return {"valid": False, "reason": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥ –¥–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã"}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
        captured_piece = game.board[to_row][to_col]
        move = {
            "from": {"row": from_row, "col": from_col},
            "to": {"row": to_row, "col": to_col},
            "piece": piece,
            "captured": captured_piece,
            "notation": self._move_to_notation({"from": from_pos, "to": to_pos, "piece": piece}),
            "move_type": target_move.get("move_type", "normal")
        }
        
        # –î–µ–ª–∞–µ–º —Ö–æ–¥ –Ω–∞ –¥–æ—Å–∫–µ
        game.board[to_row][to_col] = piece
        game.board[from_row][from_col] = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∑—è—Ç—É—é —Ñ–∏–≥—É—Ä—É
        if captured_piece:
            color_key = "white" if captured_piece.isupper() else "black"
            game.captured_pieces[color_key].append(captured_piece)
        
        return {"valid": True, "move": move}
    
    def _calculate_possible_moves(self, game: ChessGame, row: int, col: int, piece: str) -> List[Dict]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è —Ñ–∏–≥—É—Ä—ã"""
        moves = []
        piece_type = piece.lower()
        is_white = piece.isupper()
        
        if piece_type == 'p':  # –ü–µ—à–∫–∞
            direction = -1 if is_white else 1
            start_row = 6 if is_white else 1
            
            # –•–æ–¥ –≤–ø–µ—Ä–µ–¥
            new_row = row + direction
            if 0 <= new_row < 8 and not game.board[new_row][col]:
                moves.append({"row": new_row, "col": col, "move_type": "normal"})
                
                # –î–≤–æ–π–Ω–æ–π —Ö–æ–¥ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if row == start_row and not game.board[new_row + direction][col]:
                    moves.append({"row": new_row + direction, "col": col, "move_type": "double"})
            
            # –í–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            for dc in [-1, 1]:
                new_col = col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = game.board[new_row][new_col]
                    if target and (target.isupper() != is_white):
                        moves.append({"row": new_row, "col": new_col, "move_type": "capture"})
        
        elif piece_type == 'r':  # –õ–∞–¥—å—è
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            moves.extend(self._get_line_moves(game, row, col, directions, is_white))
        
        elif piece_type == 'b':  # –°–ª–æ–Ω
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            moves.extend(self._get_line_moves(game, row, col, directions, is_white))
        
        elif piece_type == 'q':  # –§–µ—Ä–∑—å
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
            moves.extend(self._get_line_moves(game, row, col, directions, is_white))
        
        elif piece_type == 'n':  # –ö–æ–Ω—å
            knight_moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]
            for dr, dc in knight_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = game.board[new_row][new_col]
                    if not target:
                        moves.append({"row": new_row, "col": new_col, "move_type": "normal"})
                    elif target.isupper() != is_white:
                        moves.append({"row": new_row, "col": new_col, "move_type": "capture"})
        
        elif piece_type == 'k':  # –ö–æ—Ä–æ–ª—å
            king_moves = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
            for dr, dc in king_moves:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    target = game.board[new_row][new_col]
                    if not target:
                        moves.append({"row": new_row, "col": new_col, "move_type": "normal"})
                    elif target.isupper() != is_white:
                        moves.append({"row": new_row, "col": new_col, "move_type": "capture"})
        
        return moves
    
    def _get_line_moves(self, game: ChessGame, row: int, col: int, directions: List[Tuple], is_white: bool) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥—ã –ø–æ –ª–∏–Ω–∏—è–º (–¥–ª—è –ª–∞–¥—å–∏, —Å–ª–æ–Ω–∞, —Ñ–µ—Ä–∑—è)"""
        moves = []
        
        for dr, dc in directions:
            for i in range(1, 8):
                new_row, new_col = row + dr * i, col + dc * i
                
                if not (0 <= new_row < 8 and 0 <= new_col < 8):
                    break
                
                target = game.board[new_row][new_col]
                
                if not target:
                    moves.append({"row": new_row, "col": new_col, "move_type": "normal"})
                else:
                    if target.isupper() != is_white:
                        moves.append({"row": new_row, "col": new_col, "move_type": "capture"})
                    break
        
        return moves
    
    async def _generate_ai_move(self, game: ChessGame) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–æ–¥–∞ –ò–ò"""
        # –ü—Ä–æ—Å—Ç–æ–π –ò–ò –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        ai_color = Color.BLACK if game.player_color == Color.WHITE else Color.WHITE
        is_white = ai_color == Color.WHITE
        
        all_moves = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –ò–ò
        for row in range(8):
            for col in range(8):
                piece = game.board[row][col]
                if piece and (piece.isupper() == is_white):
                    piece_moves = self._calculate_possible_moves(game, row, col, piece)
                    for move in piece_moves:
                        all_moves.append({
                            "from": {"row": row, "col": col},
                            "to": {"row": move["row"], "col": move["col"]},
                            "piece": piece,
                            "move_type": move.get("move_type", "normal")
                        })
        
        if not all_moves:
            return None
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∑—è—Ç–∏—é, –ø–æ—Ç–æ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
        capture_moves = [m for m in all_moves if game.board[m["to"]["row"]][m["to"]["col"]]]
        
        if capture_moves and game.difficulty.value[1] >= 3:
            return random.choice(capture_moves)
        
        return random.choice(all_moves)
    
    def _execute_move(self, game: ChessGame, move: Dict):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ–¥ –Ω–∞ –¥–æ—Å–∫–µ"""
        from_pos = move["from"]
        to_pos = move["to"]
        
        captured = game.board[to_pos["row"]][to_pos["col"]]
        
        game.board[to_pos["row"]][to_pos["col"]] = move["piece"]
        game.board[from_pos["row"]][from_pos["col"]] = ""
        
        if captured:
            color_key = "white" if captured.isupper() else "black"
            game.captured_pieces[color_key].append(captured)
        
        move["captured"] = captured
        move["notation"] = self._move_to_notation(move)
    
    def _check_game_status(self, game: ChessGame) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã (–º–∞—Ç, –ø–∞—Ç, –Ω–∏—á—å—è)"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return {"finished": False, "result": None, "reason": None}
    
    def _move_to_notation(self, move: Dict) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ö–æ–¥–∞ –≤ —à–∞—Ö–º–∞—Ç–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é"""
        piece = move["piece"].upper()
        from_pos = move["from"]
        to_pos = move["to"]
        
        files = "abcdefgh"
        from_square = f"{files[from_pos['col']]}{8 - from_pos['row']}"
        to_square = f"{files[to_pos['col']]}{8 - to_pos['row']}"
        
        capture = "x" if move.get("captured") else ""
        
        if piece == "P":
            return f"{from_square[0] if capture else ''}{capture}{to_square}"
        else:
            return f"{piece}{capture}{to_square}"
    
    def _get_board_data(self, game: ChessGame) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        return {
            "board": game.board,
            "current_turn": game.current_turn.value[0],
            "player_color": game.player_color.value[0],
            "last_move": game.last_move,
            "captured": game.captured_pieces
        }
    
    def _game_to_dict(self, game: ChessGame) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "game_id": game.game_id,
            "player_color": game.player_color.value[0],
            "difficulty": game.difficulty.name.lower(),
            "state": game.state.value,
            "current_turn": game.current_turn.value[0],
            "moves_count": len(game.moves_history),
            "ai_thinking": game.ai_thinking
        }
    
    def _get_yakov_chess_comment(self, move: Dict, game: ChessGame) -> str:
        """–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ø–∫–æ–≤–∞ –æ —Ö–æ–¥–µ"""
        comments = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ö–æ–¥! –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –∫–∞–∂–¥–∞—è —Ñ–∏–≥—É—Ä–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å.",
            "–•–æ—Ä–æ—à–∞—è —Ç–∞–∫—Ç–∏–∫–∞! –í —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è –º—ã —Ç–∞–∫ –∂–µ –æ–±–¥—É–º—ã–≤–∞–ª–∏ –∫–∞–∂–¥—ã–π —à–∞–≥.",
            "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º! –≠—Ç—É –ø–æ–∑–∏—Ü–∏—é —è –∏–∑—É—á–∞–ª –µ—â–µ –≤ —à–∞—Ö–º–∞—Ç–Ω–æ–º –∫—Ä—É–∂–∫–µ.",
            "–ù–µ–ø–ª–æ—Ö–æ, —Ç–æ–≤–∞—Ä–∏—â! –ù–æ –ø–æ–º–Ω–∏—Ç–µ - –≤ —à–∞—Ö–º–∞—Ç–∞—Ö –≤–∞–∂–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ç–∞–∫–∞.",
            "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –º–æ–π —É—á–∏—Ç–µ–ª—å: '–®–∞—Ö–º–∞—Ç—ã - —ç—Ç–æ –≤–æ–π–Ω–∞ –Ω–∞ 64 –∫–ª–µ—Ç–∫–∞—Ö'.",
            "–í–∏–∂—É, —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏. –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥!",
            "–¢–∞–∫–æ–π —Ö–æ–¥ –º—ã –Ω–∞–∑—ã–≤–∞–ª–∏ '–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–º' - —Ç–æ—á–Ω—ã–π –∏ –≤—ã–≤–µ—Ä–µ–Ω–Ω—ã–π."
        ]
        
        return f'"{random.choice(comments)}"'
    
    def get_game_status(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
        if user_id in self.active_games:
            game = self.active_games[user_id]
            return {
                "has_game": True,
                "game": self._game_to_dict(game),
                "board_data": self._get_board_data(game)
            }
        return {"has_game": False}
    
    def end_game(self, user_id: int) -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"""
        if user_id in self.active_games:
            del self.active_games[user_id]
            return {"message": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å—ã–≥—Ä–∞—Ç—å!"}
        return {"message": "–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
