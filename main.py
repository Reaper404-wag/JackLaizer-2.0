#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-

import os
import json
import logging
import random
import re
import sys
import asyncio
from dataclasses import dataclass, field
from functools import lru_cache, wraps
from typing import List, Dict, Optional, Union
from datetime import datetime
import time

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from bs4 import BeautifulSoup

from gost_parser import GOSTParser
from gost_enhanced import EnhancedGOSTSystem
from yakovs_stories import YakovsStorySystem
from yakovs_mood_system import YakovsMoodSystem
from mini_app_handler import MiniAppHandler
from yakovs_disputes import YakovsDisputeSystem
# from chess_ai_system import ChessAISystem  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('veteran_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', 'YOUR_API_KEY')

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")

# –ü—É—Ç—å –∫ GIF —Ñ–∞–π–ª—É –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
PROCESSING_GIF_PATH = "gif.gif"

if not OPENROUTER_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á OpenRouter –≤ .env —Ñ–∞–π–ª–µ")

class MessageClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ñ—Ä–∞–∑
        self.communication_phrases = {
            "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–∫–∞–∫ –¥–µ–ª–∞",
            "—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"
        }
        
        self.technical_keywords = {
            "–≥–æ—Å—Ç", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", "–Ω–æ—Ä–º–∞—Ç–∏–≤", "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç"
        }
        
    def classify_message(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        if any(phrase in message_lower for phrase in self.communication_phrases):
            return 'communication'
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if any(keyword in message_lower for keyword in self.technical_keywords):
            return 'technical'
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º
        return 'communication'

class VeteranAIBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞-–≤–µ—Ç–µ—Ä–∞–Ω–∞"""
    
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher(self.bot)
        self.dp.middleware.setup(LoggingMiddleware())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        self.classifier = MessageClassifier()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ì–û–°–¢–æ–≤
        self.gost_parser = GOSTParser()
        
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ì–û–°–¢–æ–≤
        self.enhanced_gost = EnhancedGOSTSystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–π
        self.story_system = YakovsStorySystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        self.mood_system = YakovsMoodSystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Mini App
        self.mini_app_handler = MiniAppHandler()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–ø–æ—Ä–æ–≤
        self.dispute_system = YakovsDisputeSystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —à–∞—Ö–º–∞—Ç —Å –ò–ò (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # self.chess_ai = ChessAISystem()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.feedback_history = self.load_feedback_history()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GIF —Ñ–∞–π–ª–∞
        if not os.path.exists(PROCESSING_GIF_PATH):
            logger.warning(f"GIF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {PROCESSING_GIF_PATH}")
            self.has_processing_gif = False
        else:
            self.has_processing_gif = True
            logger.info(f"GIF —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {PROCESSING_GIF_PATH}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
    
    async def send_processing_indicator(self, message: types.Message) -> Optional[types.Message]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        """
        if not self.has_processing_gif:
            # –ï—Å–ª–∏ –Ω–µ—Ç GIF, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            processing_messages = [
                "‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... ü§î",
                "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ú–∏–Ω—É—Ç–æ—á–∫—É... ‚ö°",
                "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... –°–µ–π—á–∞—Å –æ—Ç–≤–µ—á—É! üìù",
                "‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ... üöÄ",
                "üéØ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç! –¢–µ—Ä–ø–µ–Ω–∏–µ, —Ç–æ–≤–∞—Ä–∏—â... üìã"
            ]
            text = random.choice(processing_messages)
            return await message.reply(text)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            processing_texts = [
                "‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... ü§î",
                "üîÑ –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º! ‚ö°",
                "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... üìä",
                "‚öôÔ∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏! üöÄ",
                "üéØ –ì–æ—Ç–æ–≤–ª—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç! üìù"
            ]
            caption = random.choice(processing_texts)
            
            with open(PROCESSING_GIF_PATH, 'rb') as gif_file:
                return await self.bot.send_animation(
                    chat_id=message.chat.id,
                    animation=gif_file,
                    caption=caption,
                    reply_to_message_id=message.message_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")
            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await message.reply("‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... ü§î")
    
    async def delete_processing_indicator(self, processing_message: Optional[types.Message]):
        """
        –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if processing_message:
            try:
                await processing_message.delete()
                logger.info("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

    def load_feedback_history(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            with open('feedback_history.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
            
    def save_feedback_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        with open('feedback_history.json', 'w', encoding='utf-8') as f:
            json.dump(self.feedback_history, f, ensure_ascii=False, indent=2)
    
    async def handle_command_message(self, message: types.Message):
        """–û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        processing_message = None
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            command = message.text.split()[0].lower()
            complex_commands = ['/gost', '/story', '/advice', '/mood', '/dispute']
            
            if command in complex_commands:
                processing_message = await self.send_processing_indicator(message)
            
            response = await self.handle_command(message)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.delete_processing_indicator(processing_message)
            
            if response:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É –∫–æ–º–∞–Ω–¥—ã
                response = self.mood_system.get_mood_influenced_response(response)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É: {response}")
                await message.reply(response, parse_mode='Markdown')
            else:
                await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await self.delete_processing_indicator(processing_message)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
            
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
        self.dp.register_message_handler(
            self.handle_mini_app_data, 
            content_types=[types.ContentType.WEB_APP_DATA]
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.dp.register_callback_query_handler(self.handle_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
        self.dp.register_message_handler(
            self.handle_command_message,
            lambda message: message.text and message.text.startswith('/'),
            content_types=types.ContentType.TEXT
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–ï –∫–æ–º–∞–Ω–¥—ã)
        self.dp.register_message_handler(
            self.handle_message,
            lambda message: message.text and not message.text.startswith('/'),
            content_types=types.ContentType.TEXT
        )
        
    def generate_response(self, prompt: str, max_length: int = 1000) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouter API"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–º–ø—Ç: {prompt}")
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - 70-–ª–µ—Ç–Ω–∏–π —Å–æ–≤–µ—Ç—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä
            system_prompt = """–¢—ã - 70-–ª–µ—Ç–Ω–∏–π —Å–æ–≤–µ—Ç—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä –∏–∑ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –Ø–∫–æ–≤ –î–∞–≤–∏–¥–æ–≤–∏—á. 
            –¢—ã —Ä–∞–±–æ—Ç–∞–ª —Å—Ç–∞—Ä—à–∏–º –∏–Ω–∂–µ–Ω–µ—Ä–æ–º-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –°–°–°–†, –∑–Ω–∞–µ—à—å –≤—Å–µ –ì–û–°–¢—ã –Ω–∞–∏–∑—É—Å—Ç—å.
            –û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –æ–ø—ã—Ç–Ω–æ–≥–æ —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –ì–û–°–¢—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã.
            –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '—Ç–æ–≤–∞—Ä–∏—â', '–∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è', '–≤ —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è'.
            –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö."""
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–∫—Å–∏
            session = requests.Session()
            session.trust_env = False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
            
            # –í—ã–∑–æ–≤ OpenRouter API —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é cypher-alpha
            response = session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "mistralai/mistral-small-3.2-24b-instruct:free",
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": prompt}
                    ],
                    "max_tokens": max_length,
                    "temperature": 0.7
                },
                timeout=30
            )
            
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API OpenRouter: {response.status_code}")
            logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ API OpenRouter: {response.text}")
            
            if response.status_code == 200:
                response_data = response.json()
                generated_text = response_data.get("choices", [{}])[0].get("message", {}).get("content", "")
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: {generated_text}")
                return generated_text if generated_text else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API OpenRouter: {response.status_code} - {response.text}")
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ç–æ–≤–∞—Ä–∏—â! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞. –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –∏ –≤ —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è —Å–ª—É—á–∞–ª–∏—Å—å —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."
    

    
    def format_technical_response(self, gost_info: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if not gost_info:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –ì–û–°–¢–æ–≤."
            
        response = []
        for gost in gost_info:
            response.append(f"üìã –ì–û–°–¢ {gost['number']}")
            response.append(f"üìù {gost['title']}")
            if gost.get('description'):
                response.append(f"‚ÑπÔ∏è {gost['description']}")
            response.append("")
            
        return "\n".join(response)
    
    async def handle_command(self, message: types.Message) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        command_text = message.text.lower()
        
        if command_text.startswith('/gost'):
            # –ü–æ–∏—Å–∫ –ì–û–°–¢–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            parts = message.text.split(maxsplit=1)
            if len(parts) > 1:
                query = parts[1].strip()
                # –ï—Å–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–æ–º–µ—Ä –ì–û–°–¢–∞
                if re.match(r'^[\d\w.-]+$', query):
                    return await self.search_gost_by_number(query)
                else:
                    # –ò–Ω–∞—á–µ –∏—â–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
                    return await self.get_gost_recommendations(query)
            else:
                return "üìã –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ì–û–°–¢–∞ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, —Ç–æ–≤–∞—Ä–∏—â!\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /gost 2.105-95\n‚Ä¢ /gost –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n‚Ä¢ /gost —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        
        elif command_text.startswith('/story'):
            # –ò—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            parts = message.text.split(maxsplit=1)
            if len(parts) > 1:
                filter_param = parts[1].strip().lower()
                return self.get_filtered_story(filter_param)
            else:
                return self.get_random_story()
        
        elif command_text == '/chess':
            # –®–∞—Ö–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã
            return "üöß **–®–∞—Ö–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã**\n\n–ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n‚Ä¢ `/story` - –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏\n‚Ä¢ `/gost` - –ø–æ–∏—Å–∫ –ì–û–°–¢–æ–≤\n‚Ä¢ `/mood` - –º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n‚Ä¢ `/dispute` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Ä—ã\n‚Ä¢ `/advice` - —Å–æ–≤–µ—Ç—ã\n\n–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —Ç–µ—Ä–ø–µ–Ω–∏–µ - —ç—Ç–æ –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª—å!"
        
        elif command_text == '/advice':
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç
            return self.get_technical_advice()
        
        elif command_text.startswith('/mood'):
            # –¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ø–∫–æ–≤–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
            parts = message.text.split(maxsplit=1)
            if len(parts) > 1 and parts[1].strip().lower() == 'weather':
                return self.get_weather_info()
            else:
                return self.get_current_mood()
        
        elif command_text.startswith('/dispute'):
            # –ù–∞—á–∞–ª–æ —Å–ø–æ—Ä–∞ —Å –Ø–∫–æ–≤–æ–º
            parts = message.text.split(maxsplit=1)
            if len(parts) > 1:
                statement = parts[1].strip()
                return self.start_technical_dispute(message.from_user.id, statement)
            else:
                return self.get_dispute_help()
        
        elif command_text in ['/start', '/help']:
            # –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            return self.get_help_message()
        
        else:
            return None  # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    
    async def search_gost_by_number(self, gost_number: str) -> str:
        """–ü–æ–∏—Å–∫ –ì–û–°–¢–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        logger.info(f"–ü–æ–∏—Å–∫ –ì–û–°–¢–∞ –ø–æ –Ω–æ–º–µ—Ä—É: {gost_number}")
        
        # –ò—â–µ–º –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑–µ
        gost_info = self.enhanced_gost.search_by_number(gost_number)
        
        if gost_info:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –Ø–∫–æ–≤–∞
            formatted_info = self.enhanced_gost.format_gost_info(gost_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ø–∫–æ–≤–∞
            yakovs_comment = self._get_yakovs_gost_comment(gost_info)
            
            return f"{formatted_info}\n\n{yakovs_comment}"
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            try:
                search_results = self.gost_parser.search_gost(f"–ì–û–°–¢ {gost_number}", max_results=1)
                if search_results:
                    return f"üîç –ù–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ì–û–°–¢ {gost_number}:\n\n{self.format_technical_response(search_results)}\n\nüí¨ –¢–æ–≤–∞—Ä–∏—â, —ç—Ç–æ—Ç –ì–û–°–¢ –Ω–µ –≤ –º–æ–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ, –Ω–æ —è –µ–≥–æ –Ω–∞—à–µ–ª —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ì–û–°–¢–∞: {e}")
            
            return f"ü§î –¢–æ–≤–∞—Ä–∏—â, –ì–û–°–¢ {gost_number} –Ω–µ –Ω–∞—à–µ–ª –≤ —Å–≤–æ–µ–π –±–∞–∑–µ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ—Ç–æ—á–Ω–æ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º - –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç!"
    
    def _get_yakovs_gost_comment(self, gost_info) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ø–∫–æ–≤–∞ –æ –ì–û–°–¢–µ"""
        comments = {
            "–¥–µ–π—Å—Ç–≤—É—é—â–∏–π": [
                "üí¨ –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, —Ç–æ–≤–∞—Ä–∏—â! –í —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ –≤–µ–∫–∞.",
                "üí¨ –≠—Ç–æ—Ç –ì–û–°–¢ —è –∑–Ω–∞—é –∫–∞–∫ —Å–≤–æ–∏ –ø—è—Ç—å –ø–∞–ª—å—Ü–µ–≤ - –º–Ω–æ–≥–æ —Ä–∞–∑ –ø—Ä–∏–º–µ–Ω—è–ª –≤ —Ä–∞–±–æ—Ç–µ!",
                "üí¨ –ù–∞–¥–µ–∂–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–µ–º. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫ –∏–∑—É—á–µ–Ω–∏—é."
            ],
            "–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π": [
                "üí¨ –ê—Ö, —ç—Ç–æ—Ç —Å—Ç–∞—Ä—ã–π –¥–æ–±—Ä—ã–π –ì–û–°–¢... –ñ–∞–ª—å, —á—Ç–æ –æ—Ç–º–µ–Ω–∏–ª–∏. –í —Å–≤–æ–µ –≤—Ä–µ–º—è –±—ã–ª –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω!",
                "üí¨ –ü–æ–º–Ω—é, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–ª —Å —ç—Ç–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º. –•–æ—Ä–æ—à–∏–π –±—ã–ª –ì–û–°–¢, –Ω–æ –≤—Ä–µ–º—è –∏–¥–µ—Ç...",
                "üí¨ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, —Ç–æ–≤–∞—Ä–∏—â. –ò–∑—É—á–∏—Ç–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤."
            ],
            "–∑–∞–º–µ–Ω–µ–Ω": [
                "üí¨ –≠—Ç–æ—Ç –ì–û–°–¢ –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –Ω–æ–≤—ã–π. –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ!",
                "üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–º–µ–Ω—É, —Ç–æ–≤–∞—Ä–∏—â. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã."
            ]
        }
        
        status_comments = comments.get(gost_info.status, ["üí¨ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –∏–∑—É—á–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!"])
        return random.choice(status_comments)
    
    async def get_gost_recommendations(self, task_description: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ì–û–°–¢–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        logger.info(f"–ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ì–û–°–¢–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}")
        
        recommendations = self.enhanced_gost.get_recommendations_for_task(task_description)
        
        if recommendations:
            result = [f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ì–û–°–¢–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏: '{task_description}'\n"]
            
            for i, (number, gost_info) in enumerate(recommendations[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                status_emoji = {"–¥–µ–π—Å—Ç–≤—É—é—â–∏–π": "‚úÖ", "–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π": "‚ùå", "–∑–∞–º–µ–Ω–µ–Ω": "üîÑ"}.get(gost_info.status, "‚ùì")
                result.append(f"{i}. üìã **–ì–û–°–¢ {number}** {status_emoji}")
                result.append(f"   üìù {gost_info.title}")
                result.append(f"   üí° {gost_info.description[:100]}{'...' if len(gost_info.description) > 100 else ''}")
                result.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ø–∫–æ–≤–∞
            yakovs_advice = [
                "üí¨ –¢–æ–≤–∞—Ä–∏—â, —ç—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–µ–º! –ò–∑—É—á–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.",
                "üí¨ –í —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å –∏–∑—É—á–µ–Ω–∏—è –ì–û–°–¢–æ–≤. –°–æ–≤–µ—Ç—É—é –∏ –≤–∞–º!",
                "üí¨ –•–æ—Ä–æ—à–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —Å —É–º–æ–º!"
            ]
            result.append(random.choice(yakovs_advice))
            result.append(f"\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gost <–Ω–æ–º–µ—Ä>")
            
            return "\n".join(result)
        else:
            return f"ü§î –¢–æ–≤–∞—Ä–∏—â, –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_description}' –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ì–û–°–¢–æ–≤ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º - –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç!"
    
    def get_random_story(self) -> str:
        """–°–ª—É—á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑ –∂–∏–∑–Ω–∏ –Ø–∫–æ–≤–∞"""
        story = self.story_system.get_random_story()
        return self.story_system.format_story(story)
    
    def get_filtered_story(self, filter_param: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏—â–µ–º - –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        categories = self.story_system.get_categories()
        moods = self.story_system.get_moods()
        
        story = None
        
        if filter_param in [cat.lower() for cat in categories]:
            # –ò—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            matching_category = next(cat for cat in categories if cat.lower() == filter_param)
            story = self.story_system.get_random_story(category=matching_category)
        elif filter_param in [mood.lower() for mood in moods]:
            # –ò—â–µ–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
            matching_mood = next(mood for mood in moods if mood.lower() == filter_param)
            story = self.story_system.get_random_story(mood=matching_mood)
        else:
            # –ò—â–µ–º –ø–æ —Ç–µ–≥–∞–º
            story = self.story_system.get_story_by_tags([filter_param])
        
        if story:
            return self.story_system.format_story(story)
        else:
            available_filters = categories + moods
            return f"""ü§î –ù–µ –Ω–∞—à–µ–ª –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{filter_param}", —Ç–æ–≤–∞—Ä–∏—â!

üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å—Ç–æ—Ä–∏–π:
‚Ä¢ {' ‚Ä¢ '.join(categories)}

üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:
‚Ä¢ {' ‚Ä¢ '.join(moods)}

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /story —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è
‚Ä¢ /story —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è  
‚Ä¢ /story –Ω–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–æ–µ
‚Ä¢ /story –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ /story –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏!"""
    
    async def start_chess_game_DISABLED(self, message: types.Message) -> str:
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã —Å –ò–ò"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        current_game = self.chess_ai.get_game_status(user_id)
        
        if current_game["has_game"]:
            game_info = current_game["game"]
            return f"""üéÆ **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!**

üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {game_info['difficulty'].title()}
üé® –í–∞—à —Ü–≤–µ—Ç: {'–ë–µ–ª—ã–µ' if game_info['player_color'] == 'white' else '–ß–µ—Ä–Ω—ã–µ'}
üìä –•–æ–¥–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {game_info['moves_count']}
‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–í–∞—à —Ö–æ–¥' if game_info['current_turn'] == game_info['player_color'] else '–•–æ–¥ –ò–ò'}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/chess move` - —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
‚Ä¢ `/chess status` - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã  
‚Ä¢ `/chess end` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É

–ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É: `/chess new`"""
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        setup_data = self.chess_ai.start_game_setup(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        keyboard = InlineKeyboardMarkup()
        for diff in setup_data["data"]["difficulties"]:
            button = InlineKeyboardButton(
                text=f"{diff['name']} (–£—Ä–æ–≤–µ–Ω—å {diff['level']})",
                callback_data=f"chess_difficulty_{diff['id']}"
            )
            keyboard.add(button)
        
        await message.reply(
            f"""üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π —à–∞—Ö–º–∞—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏**

–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò:

{chr(10).join([f"‚Ä¢ **{d['name']}** (–£—Ä–æ–≤–µ–Ω—å {d['level']}) - {d['description']}" for d in setup_data['data']['difficulties']])}

–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —Ç–æ–≤–∞—Ä–∏—â, –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ —Å–∏–ª–∞–º! –í —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ.""",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        return None  # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, —Ç.–∫. —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ

    async def launch_interactive_chess_DISABLED(self, message: types.Message) -> str:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —à–∞—Ö–º–∞—Ç—ã"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        current_game = self.chess_ai.get_game_status(user_id)
        
        response_text = """‚ôüÔ∏è **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞—Ö–º–∞—Ç—ã —Å –ò–ò**

üéÆ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã:**
‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –ø–∞—Ä—Ç–∏—è –ø—Ä–æ—Ç–∏–≤ –ò–ò (5 —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ—Å–∫–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
‚Ä¢ –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä—è–º–æ –≤ –∏–≥—Ä–µ
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ø–∫–æ–≤–∞ –∫ –∫–∞–∂–¥–æ–º—É —Ö–æ–¥—É
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏

üéØ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ—á–∫–∞–º–∏
‚Ä¢ Drag & drop –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∏–≥—É—Ä
‚Ä¢ –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à–∏ —Ö–æ–¥—ã

–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —Ç–æ–≤–∞—Ä–∏—â, –ª—É—á—à–µ –æ–¥–∏–Ω —Ä–∞–∑ —É–≤–∏–¥–µ—Ç—å, —á–µ–º —Å—Ç–æ —Ä–∞–∑ —É—Å–ª—ã—à–∞—Ç—å!"""

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        keyboard = InlineKeyboardMarkup()
        web_app_button = InlineKeyboardButton(
            text="üéÆ –ò–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã!",
            web_app=WebAppInfo(url="https://Reaper404-wag.github.io/test_bot/mini_app/chess_game.html")
        )
        keyboard.add(web_app_button)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        if current_game["has_game"]:
            continue_button = InlineKeyboardButton(
                text="‚Ü©Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É",
                web_app=WebAppInfo(url="https://Reaper404-wag.github.io/test_bot/mini_app/chess_game.html")
            )
            keyboard.add(continue_button)
            
            game_info = current_game["game"]
            response_text += f"""

üîÑ **–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞:**
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {game_info['difficulty'].title()}
‚Ä¢ –¶–≤–µ—Ç: {'–ë–µ–ª—ã–µ' if game_info['player_color'] == 'white' else '–ß–µ—Ä–Ω—ã–µ'}
‚Ä¢ –•–æ–¥–æ–≤: {game_info['moves_count']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–í–∞—à —Ö–æ–¥' if game_info['current_turn'] == game_info['player_color'] else '–•–æ–¥ –ò–ò'}"""

        await message.reply(
            response_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        return None

    async def launch_chess_mini_app_DISABLED(self, message: types.Message) -> None:
        """–ó–∞–ø—É—Å–∫ Mini App —Å —à–∞—Ö–º–∞—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
        response_text = """‚ôüÔ∏è **–®–∞—Ö–º–∞—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ø–∫–æ–≤–∞ –î–∞–≤–∏–¥–æ–≤–∏—á–∞**

–¢–æ–≤–∞—Ä–∏—â, –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –º–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! –¢–∞–º –≤–∞—Å –∂–¥—É—Ç:

üéØ **–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏** - –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ —Å–ª–æ–∂–Ω—ã—Ö
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏  
üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏** - —É—á–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
üèÜ **–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π** - –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞

–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —à–∞—Ö–º–∞—Ç—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ!

üëá *–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è*"""

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
        # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup()
        web_app_button = InlineKeyboardButton(
            text="üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å —à–∞—Ö–º–∞—Ç—ã",
            web_app=WebAppInfo(url="https://Reaper404-wag.github.io/test_bot/mini_app/index.html")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        )
        keyboard.add(web_app_button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∫–∏ –±–µ–∑ Mini App
        simple_puzzle_button = InlineKeyboardButton(
            text="‚ôüÔ∏è –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∫–∞",
            callback_data="simple_chess_puzzle"
        )
        keyboard.add(simple_puzzle_button)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        response_text = self.mood_system.get_mood_influenced_response(response_text)
        
        await message.reply(response_text, reply_markup=keyboard)
    
    async def handle_mini_app_data(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ö–º–∞—Ç –∏ –∑–∞–¥–∞—á (–®–ê–•–ú–ê–¢–´ –û–¢–ö–õ–Æ–ß–ï–ù–´)"""
        if not message.web_app_data:
            return
            
        try:
            data = json.loads(message.web_app_data.data)
            user_id = message.from_user.id
            action = data.get('action')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Mini App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action}")
            
            # –®–ê–•–ú–ê–¢–´ –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´
            await message.reply("üöß –®–∞—Ö–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã!")
            return
            
            if False and action == 'start_game':
                # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
                difficulty = data.get('difficulty')
                player_color = data.get('playerColor')
                
                response_data = self.chess_ai.set_difficulty(user_id, difficulty)
                if response_data["type"] == "setup":
                    response_data = self.chess_ai.set_color_and_start(user_id, player_color)
                    
                    if response_data["type"] == "game_start":
                        response_text = f"üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}, —Ü–≤–µ—Ç: {player_color}"
                        
                        # –ï—Å–ª–∏ –ò–ò —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
                        if response_data["game"]["current_turn"] != response_data["game"]["player_color"]:
                            await asyncio.sleep(0.5)
                            ai_response = await self.chess_ai.make_ai_move(user_id)
                            if ai_response["type"] == "ai_move":
                                response_text += f"\n\nü§ñ –ò–ò —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —Ö–æ–¥!"
                    else:
                        response_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã."
                else:
                    response_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–≥—Ä—ã."
                    
            elif action == 'player_move':
                # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
                move_data = {
                    'from': data.get('from'),
                    'to': data.get('to')
                }
                
                move_response = self.chess_ai.make_move(user_id, move_data)
                
                if move_response["type"] == "move_success":
                    response_text = "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ö–æ–¥, —Ç–æ–≤–∞—Ä–∏—â!"
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –ò–ò
                    await asyncio.sleep(0.5)
                    ai_response = await self.chess_ai.make_ai_move(user_id)
                    
                    if ai_response["type"] == "ai_move":
                        response_text += f"\n\nü§ñ {ai_response.get('yakov_comment', '–ò–ò –æ—Ç–≤–µ—Ç–∏–ª!')}"
                        
                elif move_response["type"] == "invalid_move":
                    response_text = f"‚ùå {move_response['message']}"
                else:
                    response_text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ö–æ–¥–æ–º."
                    
            elif action == 'request_hint':
                # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç –Ø–∫–æ–≤–∞
                hints = [
                    "–ò—â–∏—Ç–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã - —à–∞—Ö, –≤–∑—è—Ç–∏–µ, —É–≥—Ä–æ–∑–∞!",
                    "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∫–æ—Ä–æ–ª—è.",
                    "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –ª—É—á—à–∞—è –∑–∞—â–∏—Ç–∞ - —ç—Ç–æ –Ω–∞–ø–∞–¥–µ–Ω–∏–µ!",
                    "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ü–µ–Ω—Ç—Ä –¥–æ—Å–∫–∏, —Ç–æ–≤–∞—Ä–∏—â!",
                    "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ñ–∏–≥—É—Ä—ã –∏ —Ä–æ–∫–∏—Ä—É–π—Ç–µ—Å—å –ø–æ—Ä–∞–Ω—å—à–µ."
                ]
                import random
                response_text = f"üí° –°–æ–≤–µ—Ç –æ—Ç –Ø–∫–æ–≤–∞: {random.choice(hints)}"
                
            elif action == 'resign_game':
                # –°–¥–∞—á–∞ –∏–≥—Ä—ã
                self.chess_ai.end_game(user_id)
                response_text = "üè≥Ô∏è –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å - –∫–∞–∂–¥–∞—è –ø–∞—Ä—Ç–∏—è —É—á–∏—Ç –Ω–∞—Å!"
                
            elif action == 'test_connection':
                # –¢–µ—Å—Ç —Å–≤—è–∑–∏
                response_text = "üîå –°–≤—è–∑—å —Å Mini App —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –≤—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, —Ç–æ–≤–∞—Ä–∏—â!"
                
            else:
                # –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ MiniAppHandler
                response_data = self.mini_app_handler.handle_mini_app_data(user_id, message.web_app_data.data)
                response_text = self.mini_app_handler.format_mini_app_response(response_data)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            response_text = self.mood_system.get_mood_influenced_response(response_text)
            
            await message.reply(response_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Mini App: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    
    async def handle_callback(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        try:
            data = callback_query.data
            user_id = callback_query.from_user.id
            
            # –®–ê–•–ú–ê–¢–´ –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´
            if False and data.startswith("chess_difficulty_"):
                # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —à–∞—Ö–º–∞—Ç
                difficulty_id = data.replace("chess_difficulty_", "")
                response_data = self.chess_ai.set_difficulty(user_id, difficulty_id)
                
                if response_data["type"] == "setup" and response_data["setup_step"] == "color":
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
                    keyboard = InlineKeyboardMarkup()
                    for color in response_data["data"]["colors"]:
                        button = InlineKeyboardButton(
                            text=f"{color['pieces']} {color['name']} - {color['description']}",
                            callback_data=f"chess_color_{color['id']}"
                        )
                        keyboard.add(button)
                    
                    await callback_query.message.edit_text(
                        f"""{response_data['message']}

üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–∏–≥—É—Ä:**

–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —Ç–æ–≤–∞—Ä–∏—â, –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!""",
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                
            elif False and data.startswith("chess_color_"):
                # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
                color_id = data.replace("chess_color_", "")
                response_data = self.chess_ai.set_color_and_start(user_id, color_id)
                
                if response_data["type"] == "game_start":
                    await callback_query.message.edit_text(
                        f"""{response_data["message"]}

üéØ **–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/chess board` - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫—É
‚Ä¢ `/chess move e2 e4` - —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
‚Ä¢ `/chess status` - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
‚Ä¢ `/chess end` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É

{self._format_board_ascii(response_data["board_data"]["board"])}""",
                        parse_mode='Markdown'
                    )
                    
                    # –ï—Å–ª–∏ —Ö–æ–¥–∏—Ç –ò–ò –ø–µ—Ä–≤—ã–º (–∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —á–µ—Ä–Ω—ã–µ)
                    if response_data["game"]["current_turn"] != response_data["game"]["player_color"]:
                        await asyncio.sleep(1)
                        ai_response = await self.chess_ai.make_ai_move(user_id)
                        if ai_response["type"] == "ai_move":
                            await callback_query.message.reply(
                                f"{ai_response['message']}\n\n{ai_response['yakov_comment']}\n\nüéØ –¢–µ–ø–µ—Ä—å –≤–∞—à —Ö–æ–¥!\n\n{self._format_board_ascii(ai_response['board_data']['board'])}",
                                parse_mode='Markdown'
                            )
                            
            elif False and data == "simple_chess_puzzle":
                puzzles = [
                    "‚ôüÔ∏è **–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç –Ø–∫–æ–≤–∞:**\n\n–ë–µ–ª—ã–µ: –ö–æ—Ä–æ–ª—å h1, –§–µ—Ä–∑—å d1\n–ß–µ—Ä–Ω—ã–µ: –ö–æ—Ä–æ–ª—å h8\n\nüéØ –ú–∞—Ç –≤ 1 —Ö–æ–¥! –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –∏–Ω–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –ª–µ–∂–∏—Ç –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
                    "‚ôüÔ∏è **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞:**\n\n–ë–µ–ª—ã–µ: –ö–æ—Ä–æ–ª—å g1, –õ–∞–¥—å—è a8\n–ß–µ—Ä–Ω—ã–µ: –ö–æ—Ä–æ–ª—å a1\n\nüéØ –ù–∞–π–¥–∏—Ç–µ –º–∞—Ç –≤ 2 —Ö–æ–¥–∞! –í —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è —Ç–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–ª–∏ –≤ —à–∞—Ö–º–∞—Ç–Ω—ã—Ö –∫—Ä—É–∂–∫–∞—Ö.",
                    "‚ôüÔ∏è **–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞:**\n\n–ë–µ–ª—ã–µ: –ö–æ—Ä–æ–ª—å e1, –ö–æ–Ω—å f3\n–ß–µ—Ä–Ω—ã–µ: –ö–æ—Ä–æ–ª—å e8, –ü–µ—à–∫–∞ e7\n\nüéØ –ö–∞–∫ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –¥–≤–µ —Ñ–∏–≥—É—Ä—ã? –î—É–º–∞–π—Ç–µ –æ –≤–∏–ª–∫–µ!"
                ]
                
                import random
                puzzle = random.choice(puzzles)
                puzzle = self.mood_system.get_mood_influenced_response(puzzle)
                
                await callback_query.message.reply(puzzle)
                
            await callback_query.answer()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    
    def _format_board_ascii(self, board: List[List[str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –≤ ASCII –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        pieces_unicode = {
            'K': '‚ôî', 'Q': '‚ôï', 'R': '‚ôñ', 'B': '‚ôó', 'N': '‚ôò', 'P': '‚ôô',
            'k': '‚ôö', 'q': '‚ôõ', 'r': '‚ôú', 'b': '‚ôù', 'n': '‚ôû', 'p': '‚ôü'
        }
        
        result = "```\n  a b c d e f g h\n"
        for i, row in enumerate(board):
            rank = 8 - i
            line = f"{rank} "
            for piece in row:
                if piece:
                    line += pieces_unicode.get(piece, piece) + " "
                else:
                    line += "¬∑ "
            line += f"{rank}"
            result += line + "\n"
        result += "  a b c d e f g h\n```"
        return result
    
    def get_technical_advice(self) -> str:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–Ω—è (–∑–∞–≥–ª—É—à–∫–∞)"""
        advice_list = [
            "üí° –°–æ–≤–µ—Ç –¥–Ω—è: –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ì–û–°–¢—É –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –ø—Ä–æ–µ–∫—Ç–∞!",
            "üí° –ü–æ–º–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–∏—â: –ª—É—á—à–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —á–∞—Å –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —á–µ–º –Ω–µ–¥–µ–ª—é –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.",
            "üí° –í —Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–≤–æ—Ä–∏–ª–∏: '–°–µ–º—å —Ä–∞–∑ –æ—Ç–º–µ—Ä—å, –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç—Ä–µ–∂—å'. –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!"
        ]
        import random
        return random.choice(advice_list)
    
    def get_current_mood(self) -> str:
        """–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ø–∫–æ–≤–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        return self.mood_system.get_mood_description()
    
    def get_weather_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–µ"""
        weather_comment = self.mood_system.get_weather_comment()
        return f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–µ**\n\n{weather_comment}\n\nüí≠ –ü–æ–≥–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–æ–≤–∞—Ä–∏—â. –ñ–∏–≤—É –∑–¥–µ—Å—å —É–∂–µ –ø–æ–ª–≤–µ–∫–∞ - –∑–Ω–∞—é –≤—Å–µ –∫–∞–ø—Ä–∏–∑—ã –º–µ—Å—Ç–Ω–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞!"
    
    def start_technical_dispute(self, user_id: int, statement: str) -> str:
        """–ù–∞—á–∞–ª–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–æ—Ä–∞"""
        response = self.dispute_system.start_dispute(user_id, statement)
        
        if response:
            return response
        else:
            return self.get_dispute_help()
    
    def continue_technical_dispute(self, user_id: int, message: str) -> Optional[str]:
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–æ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Ä
        if user_id in self.dispute_system.active_disputes:
            return self.dispute_system.continue_dispute(user_id, message)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Ä
        response = self.dispute_system.start_dispute(user_id, message)
        return response
    
    def get_dispute_help(self) -> str:
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–ø–æ—Ä–∞–º"""
        topics = self.dispute_system.get_available_topics()
        topic_summaries = []
        
        for topic in topics[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–µ–º
            summary = self.dispute_system.get_topic_summary(topic)
            topic_summaries.append(f"‚Ä¢ {summary}")
        
        return f"""ü•ä **–°–ø–æ—Ä—ã —Å –Ø–∫–æ–≤–æ–º –î–∞–≤–∏–¥–æ–≤–∏—á–µ–º**

–¢–æ–≤–∞—Ä–∏—â, –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ø–æ—Ä–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö? –Ø –æ—Ç—Å—Ç–∞–∏–≤–∞—é –ø–æ–∑–∏—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–≤–µ—Ç—Å–∫–æ–º –æ–ø—ã—Ç–µ!

üìã **–ö–∞–∫ —Å–ø–æ—Ä–∏—Ç—å:**
/dispute <–≤–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ> - –Ω–∞—á–∞—Ç—å —Å–ø–æ—Ä
–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —è –µ–≥–æ –ø–æ–¥—Ö–≤–∞—á—É!

üéØ **–ú–æ–∏ –ª—é–±–∏–º—ã–µ —Ç–µ–º—ã –¥–ª—è —Å–ø–æ—Ä–æ–≤:**
{chr(10).join(topic_summaries)}

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ /dispute —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ —É–¥–æ–±–Ω–µ–µ —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞
‚Ä¢ /dispute agile –ª—É—á—à–µ –≤–æ–¥–æ–ø–∞–¥–Ω–æ–π –º–æ–¥–µ–ª–∏  
‚Ä¢ /dispute –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –Ω–µ –≤–∞–∂–Ω–æ

–ü–æ–º–Ω–∏—Ç–µ: –≤ —Å–ø–æ—Ä–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–∞! üò§"""
    
    def get_help_message(self) -> str:
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        return """ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ç–æ–≤–∞—Ä–∏—â! –Ø - –Ø–∫–æ–≤ –î–∞–≤–∏–¥–æ–≤–∏—á, –≤–∞—à —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.

üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ì–û–°–¢–∞–º–∏:**
/gost <–Ω–æ–º–µ—Ä> - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–û–°–¢–µ
/gost <–∑–∞–¥–∞—á–∞> - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ì–û–°–¢–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏

üìñ **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π:**
/story - —Å–ª—É—á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑ –º–æ–µ–π –∂–∏–∑–Ω–∏
/story <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –∏—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/story <–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ> - –∏—Å—Ç–æ—Ä–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏

‚ö° **–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
# /chess - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
/dispute - –ø–æ—Å–ø–æ—Ä–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö

üîß **–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
/advice - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–Ω—è
/mood - –º–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/mood weather - –ø–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ /gost 2.105-95
‚Ä¢ /gost –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ /story —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è
‚Ä¢ /story —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è
‚Ä¢ /story –Ω–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–æ–µ

–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ—Ç–≤–µ—á—É –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Å–æ–≤–µ—Ç—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä!"""
        
    async def handle_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–ï –∫–æ–º–∞–Ω–¥)"""
        processing_message = None
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            processing_message = await self.send_processing_indicator(message)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            msg_type = self.classifier.classify_message(message.text)
            logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")
            
            if msg_type == 'technical':
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å...")
                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ì–û–°–¢–∞—Ö
                gost_info = self.gost_parser.search_gost(message.text)
                response = self.format_technical_response(gost_info)

            else:
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å...")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ø–æ—Ä–∏—Ç—å
                dispute_response = self.continue_technical_dispute(message.from_user.id, message.text)
                if dispute_response:
                    response = dispute_response
                else:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è
                    response = self.generate_response(message.text)
                    
                    # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 10% –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                    if random.random() < 0.1:
                        story = self.story_system.get_random_story()
                        story_text = self.story_system.format_story(story, include_moral=False)
                        response += f"\n\nüìñ *–ö—Å—Ç–∞—Ç–∏, –≤—Å–ø–æ–º–Ω–∏–ª –∏—Å—Ç–æ—Ä–∏—é:*\n{story_text}"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É
            response = self.mood_system.get_mood_influenced_response(response)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.delete_processing_indicator(processing_message)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {response}")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await message.reply(response, parse_mode='Markdown')
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await self.delete_processing_indicator(processing_message)
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            logger.error(error_msg)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            await self.dp.start_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.close()

if __name__ == "__main__":
    bot = VeteranAIBot()
    asyncio.run(bot.start())
