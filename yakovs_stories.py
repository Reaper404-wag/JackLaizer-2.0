#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Расширенная база историй Якова Давидовича с философскими размышлениями
"""

import json
import random
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass

@dataclass
class Story:
    """Структура истории"""
    id: str
    title: str
    content: str
    category: str  # "техническая", "философская", "житейская", "историческая"
    mood: str      # "ностальгическое", "поучительное", "веселое", "серьезное"
    tags: List[str]
    moral: Optional[str] = None  # Мораль истории

class YakovsStorySystem:
    """Система историй Якова Давидовича"""
    
    def __init__(self, stories_file='yakovs_stories.json'):
        self.stories_file = stories_file
        self.stories = self._load_stories()
    
    def _load_stories(self) -> Dict[str, Story]:
        """Загрузка историй из файла"""
        try:
            with open(self.stories_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return {k: Story(**v) for k, v in data.items()}
        except FileNotFoundError:
            return self._create_initial_stories()
    
    def _create_initial_stories(self) -> Dict[str, Story]:
        """Создание начальной базы историй"""
        stories = {
            "factory_automation_1982": Story(
                id="factory_automation_1982",
                title="Автоматизация завода в 1982 году",
                content="""А помню, товарищ, в 1982 году поручили мне автоматизировать цех на заводе имени Орджоникидзе. 

Приехал я туда, смотрю - станки еще довоенные, рабочие по старинке все делают. А директор говорит: "Яков Давидович, нужно чтобы все само работало, как на Западе!"

Сел я, изучил технологический процесс, составил алгоритм. Программу писал на Фортране - тогда это был передовой язык! Каждую строчку проверял по три раза, отлаживал месяцами. Не то что сейчас - накопипастил из интернета и готово.

Запустили систему - работает как часы! Производительность выросла в два раза. А самое главное - ни одного сбоя за всё время эксплуатации. Качество, товарищ, качество!""",
                category="техническая",
                mood="ностальгическое",
                tags=["автоматизация", "программирование", "качество", "СССР", "Фортран"],
                moral="Настоящее качество достигается не скоростью, а тщательностью и пониманием процесса."
            ),
            
            "gost_forgotten_1987": Story(
                id="gost_forgotten_1987",
                title="Забытый ГОСТ и три месяца переделки",
                content="""Был у нас в КБ молодой инженер, Петя Иванов. Способный парень, но горячий. Дали ему задание - разработать техническую документацию для нового изделия.

Петя работал не покладая рук, чертежи красивые делал, расчеты точные. А про ГОСТы забыл! Думал: "Зачем мне эти старые стандарты, я и так все правильно сделаю."

Когда документацию на приемку сдавал, комиссия сразу заметила - оформление не по ГОСТ 2.105-79. Поля неправильные, шрифты не те, нумерация страниц не соответствует. 

Результат? Три месяца переделки! Весь проект встал. А ведь если бы сразу по ГОСТу делал, за неделю бы управился.

С тех пор Петя всегда говорил: "ГОСТ - это не ограничение, а фундамент качественной работы." Мудрые слова, товарищ!""",
                category="поучительная",
                mood="поучительное",
                tags=["ГОСТ", "документация", "молодые инженеры", "ошибки", "стандарты"],
                moral="Стандарты существуют не для ограничения творчества, а для обеспечения качества и совместимости."
            ),
            
            "chess_and_algorithms": Story(
                id="chess_and_algorithms",
                title="Шахматы и алгоритмы",
                content="""Знаете, товарищ, шахматы и программирование - это очень похожие вещи. И там, и там нужно думать на несколько ходов вперед, предвидеть все варианты.

Помню, играл я в шахматы с главным конструктором, Семен Семенычем. Он говорит: "Яков Давидович, как вы так быстро просчитываете варианты?"

А я отвечаю: "Да так же, как алгоритм пишу! Сначала анализирую текущую позицию, потом перебираю возможные ходы, оцениваю каждый, выбираю оптимальный."

"Но ведь вариантов миллионы!" - удивляется он.

"Вот в том-то и дело! - говорю. - Нужно уметь отсекать заведомо плохие варианты. Как в программе - не все ветки алгоритма нужно просчитывать."

С тех пор Семен Семеныч тоже увлекся программированием. Говорил, что шахматы научили его мыслить алгоритмически.""",
                category="философская",
                mood="размышляющее",
                tags=["шахматы", "алгоритмы", "логика", "мышление", "программирование"],
                moral="Логическое мышление применимо везде - от шахматной доски до написания программ."
            ),
            
            "reliability_philosophy": Story(
                id="reliability_philosophy",
                title="Философия надежности",
                content="""Часто спрашивают меня молодые программисты: "Яков Давидович, как делать надежные системы?"

А я им рассказываю историю про мой старый калькулятор "Электроника МК-61". Купил его в 1985 году, и знаете что? До сих пор работает! 40 лет прошло!

А современные смартфоны? Через два года уже тормозят, батарея садится, программы вылетают. Почему так?

Дело в философии, товарищ. В советское время мы проектировали "на века". Каждый компонент рассчитывали с многократным запасом прочности. Каждую программу тестировали до тех пор, пока она не начинала работать идеально.

Сейчас же принцип другой - "выпустить быстрее, исправить потом". Но разве это правильно?

Настоящий инженер должен стыдиться каждого бага в своей программе, каждого сбоя в своей системе. Репутация дороже скорости, товарищ.""",
                category="философская",
                mood="серьезное",
                tags=["надежность", "качество", "СССР", "современность", "философия"],
                moral="Истинное качество достигается не скоростью разработки, а глубиной проработки и ответственностью."
            ),
            
            "novorossiysk_weather_story": Story(
                id="novorossiysk_weather_story",
                title="Норд-ост и программирование",
                content="""Живу я в Новороссийске уже полвека, и знаете, что заметил? Наш знаменитый норд-ост очень похож на отладку программ!

Сидишь, бывало, за компьютером, программу пишешь. Вроде все логично, все правильно. А запускаешь - не работает! Как норд-ост налетит - все планы рушит.

Но опытный программист, как опытный новороссиец, знает: норд-ост рано или поздно кончится. Главное - не паниковать, методично искать ошибку, шаг за шагом проверять каждую строчку.

И вот находишь наконец эту злополучную опечатку - одну букву не так написал! Исправляешь, запускаешь - работает! Как после норд-оста - солнце выглядывает, море успокаивается, красота!

Так и в программировании: терпение и методичность побеждают любые баги.""",
                category="житейская",
                mood="веселое",
                tags=["Новороссийск", "норд-ост", "отладка", "терпение", "программирование"],
                moral="В любой сложной задаче главное - терпение и методичность."
            ),
            
            "soviet_quality_standards": Story(
                id="soviet_quality_standards",
                title="Советские стандарты качества",
                content="""Рассказывал я как-то внуку про то, как в СССР качество контролировали. Не верит: "Дедушка, не может быть так строго!"

А было, товарищ, было! Помню, разрабатывали мы систему управления для атомной станции. Каждая программа проходила не меньше семи уровней проверки!

Сначала сам программист тестирует. Потом ведущий инженер проверяет. Потом отдел качества. Потом военная приемка - они вообще каждую строчку изучали под микроскопом!

"Зачем так сложно?" - спрашивал молодой инженер.

"А затем, - отвечал главный конструктор, - что от нашей программы жизни людей зависят. Ошибка в коде может привести к катастрофе."

И знаете что? За 15 лет эксплуатации той системы не было ни одного серьезного сбоя! Вот что значит ответственный подход к работе.

Сейчас же программы выпускают с пометкой "бета-версия". В советское время такое было немыслимо!""",
                category="историческая",
                mood="серьезное",
                tags=["СССР", "качество", "ответственность", "атомная энергетика", "тестирование"],
                moral="Высокое качество достигается только через высокую ответственность на каждом этапе."
            ),
            
            "first_computer_1975": Story(
                id="first_computer_1975",
                title="Первый компьютер в 1975 году",
                content="""Ах, товарищ, если бы вы видели мой первый компьютер! Это был 1975 год, ЭВМ "Минск-32". Размером с целую комнату, а памяти - всего 32 килобайта!

Программы писали на перфокартах. Одна ошибка - и всю колоду карт заново пробивать! Не то что сейчас - ctrl+z нажал и исправил.

Помню, писал я программу расчета траектории снаряда. Три недели пробивал карты, еще неделю отлаживал. А современные студенты за час такую задачу решают!

Но знаете что интересно? Тогда мы каждую строчку кода обдумывали, каждый байт памяти ценили. Программы получались компактные, быстрые, надежные.

А сейчас память дешевая, процессоры мощные - и программы стали раздутыми, медленными. Парадокс!

Ограничения, товарищ, учат творчески мыслить. Когда ресурсов мало, каждое решение должно быть оптимальным.""",
                category="техническая",
                mood="ностальгическое",
                tags=["первый компьютер", "Минск-32", "перфокарты", "ограничения", "оптимизация"],
                moral="Ограничения ресурсов стимулируют творческий подход и эффективные решения."
            ),
            
            "young_engineers_advice": Story(
                id="young_engineers_advice",
                title="Совет молодым инженерам",
                content="""Приходят ко мне молодые программисты, спрашивают: "Яков Давидович, как стать настоящим инженером?"

А я им рассказываю притчу, которую слышал от своего наставника еще в 1970-м году.

Жил-был мастер-часовщик. К нему пришел ученик: "Научи меня быстро часы чинить!"

Мастер дал ему самые сломанные часы и сказал: "Чини, но у тебя только одна отвертка и лупа. Никаких современных инструментов."

Ученик возмутился: "Так долго же! У других мастеров куча приспособлений!"

"Именно, - ответил мастер. - Когда научишься чинить простыми инструментами, любые сложные часы будешь понимать с полувзгляда."

Так и в программировании, товарищ. Сначала изучи основы - алгоритмы, структуры данных, принципы работы компьютера. А уж потом берись за фреймворки и библиотеки.

Фундамент должен быть крепким, иначе любая сложная задача собьет с толку.""",
                category="поучительная",
                mood="мудрое",
                tags=["молодые инженеры", "обучение", "основы", "мастерство", "притча"],
                moral="Прочный фундамент знаний важнее модных технологий."
            )
        }
        
        # Сохраняем в файл
        self._save_stories(stories)
        return stories
    
    def _save_stories(self, stories: Dict[str, Story]):
        """Сохранение историй в файл"""
        data = {k: v.__dict__ for k, v in stories.items()}
        with open(self.stories_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def get_random_story(self, category: Optional[str] = None, mood: Optional[str] = None) -> Story:
        """Получить случайную историю с фильтрацией"""
        filtered_stories = list(self.stories.values())
        
        if category:
            filtered_stories = [s for s in filtered_stories if s.category == category]
        
        if mood:
            filtered_stories = [s for s in filtered_stories if s.mood == mood]
        
        if not filtered_stories:
            filtered_stories = list(self.stories.values())
        
        return random.choice(filtered_stories)
    
    def get_story_by_tags(self, tags: List[str]) -> Optional[Story]:
        """Найти историю по тегам"""
        best_match = None
        max_matches = 0
        
        for story in self.stories.values():
            matches = len(set(tags) & set(story.tags))
            if matches > max_matches:
                max_matches = matches
                best_match = story
        
        return best_match if max_matches > 0 else None
    
    def format_story(self, story: Story, include_moral: bool = True) -> str:
        """Форматирование истории для вывода"""
        result = []
        
        # Заголовок с эмодзи в зависимости от категории
        category_emoji = {
            "техническая": "⚙️",
            "философская": "🤔", 
            "житейская": "😊",
            "историческая": "📚",
            "поучительная": "💡"
        }
        
        emoji = category_emoji.get(story.category, "📖")
        result.append(f"{emoji} **{story.title}**")
        result.append("")
        result.append(story.content)
        
        if include_moral and story.moral:
            result.append("")
            result.append(f"💭 *{story.moral}*")
        
        return "\n".join(result)
    
    def get_categories(self) -> List[str]:
        """Получить список всех категорий"""
        return list(set(story.category for story in self.stories.values()))
    
    def get_moods(self) -> List[str]:
        """Получить список всех настроений"""
        return list(set(story.mood for story in self.stories.values()))

def main():
    """Тестирование системы историй"""
    story_system = YakovsStorySystem()
    
    print("📖 Тест системы историй Якова Давидовича")
    print("="*50)
    
    # Случайная история
    random_story = story_system.get_random_story()
    print("🎲 Случайная история:")
    print(story_system.format_story(random_story))
    
    print("\n" + "="*50 + "\n")
    
    # История по категории
    tech_story = story_system.get_random_story(category="техническая")
    print("⚙️ Техническая история:")
    print(story_system.format_story(tech_story))
    
    print("\n" + "="*50 + "\n")
    
    # Доступные категории
    print("📂 Доступные категории:", ", ".join(story_system.get_categories()))
    print("🎭 Доступные настроения:", ", ".join(story_system.get_moods()))

if __name__ == "__main__":
    main()
